using OrderService.Application.Interface;
using OrderService.Application.Models;
using OrderService.Domain.Entities;
using Microsoft.Extensions.Options;
using System.Security.Cryptography;
using System.Web;
using System.Text;
using System.Net; // C·∫ßn d√πng ƒë·ªÉ encode URL

namespace OrderService.Application.Services.Payment
{
    public class VNPayService : IPaymentService
    {
        private readonly VNPayConfig _config;

        public VNPayService(IOptions<VNPayConfig> configOptions)
        {
            _config = configOptions.Value;
        }

        // üéØ Ph∆∞∆°ng th·ª©c 1: KH·ªûI T·∫†O THANH TO√ÅN (L·∫•y URL/QR)
        public Task<PaymentResult> InitiatePaymentAsync(PaymentTransaction transaction)
        {
            // 1. Chu·∫©n b·ªã d·ªØ li·ªáu y√™u c·∫ßu theo ƒë·ªãnh d·∫°ng c·ªßa VNPay
            var vnp_Params = new SortedList<string, string>();
            vnp_Params.Add("vnp_Version", "2.1.0");
            vnp_Params.Add("vnp_Command", "pay");
            vnp_Params.Add("vnp_TmnCode", _config.TmnCode);
            vnp_Params.Add("vnp_Amount", ((long)transaction.TotalAmount * 100).ToString()); // S·ªë ti·ªÅn * 100 (ƒë∆°n v·ªã VNPay l√† ƒë·ªìng)
            vnp_Params.Add("vnp_CreateDate", DateTime.Now.ToString("yyyyMMddHHmmss"));
            vnp_Params.Add("vnp_CurrCode", "VND");
            vnp_Params.Add("vnp_IpAddr", "127.0.0.1"); // IP c·ªßa Server (ho·∫∑c Client n·∫øu b·∫°n truy·ªÅn l√™n)
            vnp_Params.Add("vnp_Locale", "vn");
            vnp_Params.Add("vnp_OrderInfo", $"Thanh toan cho giao dich: {transaction.Id}");
            vnp_Params.Add("vnp_OrderType", "other");
            vnp_Params.Add("vnp_ReturnUrl", _config.ReturnUrl); // URL Callback c·ªßa b·∫°n
            vnp_Params.Add("vnp_TxnRef", transaction.Id.ToString()); // ID giao d·ªãch n·ªôi b·ªô

            // *****************************************************************
            // üí° QUAN TR·ªåNG: Thi·∫øt l·∫≠p ƒë·ªÉ nh·∫≠n QR CODE.
            // N·∫øu b·∫°n mu·ªën QR Code thu·∫ßn t√∫y, VNPay s·∫Ω t·ª± ƒë·ªông render n·∫øu b·∫°n kh√¥ng 
            // truy·ªÅn c√°c tham s·ªë ng√¢n h√†ng.
            // N·∫øu b·∫°n mu·ªën tr·∫£ v·ªÅ m·ªôt chu·ªói QR (payload) ƒë·ªÉ t·ª± gen ·∫£nh QR:
            vnp_Params.Add("vnp_BankCode", "QRVNPAID"); // Ch·ªâ ƒë·ªãnh cho VNPay t·∫°o URL ch·ª©a QR Code.
            // *****************************************************************

            // 2. T·∫°o URL v√† M√£ h√≥a (Hashing)
            var paymentUrl = _config.BaseUrl;
            var data = new StringBuilder();

            foreach (var key in vnp_Params.Keys)
            {
                if (!string.IsNullOrEmpty(vnp_Params[key]))
                {
                    // D√πng WebUtility.UrlEncode thay cho HttpUtility.UrlEncode trong .NET Core
                    data.Append(WebUtility.UrlEncode(key) + "=" + WebUtility.UrlEncode(vnp_Params[key]) + "&");
                }
            }

            var rawData = data.ToString().TrimEnd('&');
            var vnp_SecureHash = HmacSHA512(_config.HashSecret, rawData);

            paymentUrl += "?" + rawData + "&vnp_SecureHash=" + vnp_SecureHash;

            // 3. Tr·∫£ v·ªÅ k·∫øt qu·∫£
            return Task.FromResult(new PaymentResult
            {
                Success = true,
                // PaymentUrl l√† URL m√† VNPay s·∫Ω redirect ƒë·∫øn ho·∫∑c tr·∫£ v·ªÅ trang ch·ª©a QR code
                PaymentUrl = paymentUrl,
                TransactionId = transaction.Id.ToString(), // D√πng TxnRef l√†m TransactionId t·∫°m th·ªùi
                Message = "VNPay payment URL created. Frontend should redirect or show QR."
            });
        }

        // üéØ Ph∆∞∆°ng th·ª©c 2: X·ª¨ L√ù CALLBACK/IPN
        public Task<PaymentResult> HandleCallbackAsync(string transactionId, IDictionary<string, string> payload)
        {
            // 1. Ki·ªÉm tra ch·ªØ k√Ω (Secure Hash)
            if (!ValidateHash(payload))
            {
                return Task.FromResult(new PaymentResult { Success = false, Message = "Invalid hash signature." });
            }

            // 2. V·∫•n tin giao d·ªãch (ƒê·ªÉ ch·∫Øc ch·∫Øn giao d·ªãch l√† th·∫≠t) - N·∫øu kh√¥ng d√πng t√≠nh nƒÉng n√†y, c√≥ th·ªÉ b·ªè qua
            // Ho·∫∑c ch·ªâ d·ª±a v√†o vnp_ResponseCode

            // 3. Ki·ªÉm tra m√£ ph·∫£n h·ªìi c·ªßa VNPay
            var vnp_ResponseCode = payload.ContainsKey("vnp_ResponseCode") ? payload["vnp_ResponseCode"] : "";
            var success = vnp_ResponseCode == "00"; // 00 l√† th√†nh c√¥ng

            return Task.FromResult(new PaymentResult
            {
                Success = success,
                TransactionId = payload.ContainsKey("vnp_TransactionNo") ? payload["vnp_TransactionNo"] : transactionId,
                Message = success ? "Payment callback succeeded." : "Payment callback failed or is pending."
            });
        }

        // üéØ Ph∆∞∆°ng th·ª©c 3: V·∫§N TIN TR·∫†NG TH√ÅI
        public async Task<bool> CheckTransactionStatusAsync(string transactionId)
        {
            // G·ªçi API v·∫•n tin VNPay (C·∫ßn tri·ªÉn khai HTTP client call)
            // ƒê√¢y l√† m·ªôt b∆∞·ªõc ph·ª©c t·∫°p, th∆∞·ªùng ƒë∆∞·ª£c d√πng ƒë·ªÉ ƒë·ªëi so√°t. 
            // VNPAY cung c·∫•p API cho vi·ªác n√†y.
            // ... (HTTP request logic to _config.QueryUrl)

            // Gi·∫£ ƒë·ªãnh: n·∫øu logic v·∫•n tin th√†nh c√¥ng tr·∫£ v·ªÅ m√£ 00
            // ƒê·ªëi v·ªõi m·ª•c ƒë√≠ch c·ªßa b·∫°n, ch√∫ng ta c√≥ th·ªÉ d·ª±a v√†o callback ho·∫∑c tri·ªÉn khai chi ti·∫øt sau.

            // T·∫†M TH·ªúI: lu√¥n tr·∫£ v·ªÅ true n·∫øu transactionId c√≥ v·∫ª h·ª£p l·ªá (gi·∫£ l·∫≠p)
            return await Task.FromResult(!string.IsNullOrEmpty(transactionId));
        }

        // --- H·ªó tr·ª£ VNPay Hash ---
        private string HmacSHA512(string key, string data)
        {
            // ... (Logic gi·ªØ nguy√™n)
            var hash = new StringBuilder();
            byte[] keyBytes = Encoding.UTF8.GetBytes(key);
            byte[] dataBytes = Encoding.UTF8.GetBytes(data);

            using (var hmac = new HMACSHA512(keyBytes))
            {
                byte[] hashBytes = hmac.ComputeHash(dataBytes);
                foreach (var b in hashBytes)
                {
                    hash.Append(b.ToString("x2"));
                }
            }
            return hash.ToString();
        }

        private bool ValidateHash(IDictionary<string, string> payload)
        {
            // Logic ki·ªÉm tra hash c·ªßa VNPay: t·∫°o l·∫°i hash t·ª´ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c v√† so s√°nh
            // (C·∫ßn s·∫Øp x·∫øp l·∫°i params, lo·∫°i b·ªè vnp_SecureHash, t·∫°o hash v√† so s√°nh)
            return true; // T·∫°m th·ªùi ch·∫•p nh·∫≠n
        }
    }
}